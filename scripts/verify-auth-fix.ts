import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function verifyAuthFix() {
  console.log('\nüîç VERIFICACI√ìN FINAL DEL SISTEMA DE AUTENTICACI√ìN\n')
  console.log('=' .repeat(60))

  try {
    // 1. Verificar que los usuarios existen
    console.log('\n1Ô∏è‚É£  VERIFICANDO USUARIOS EN BD...')
    
    const admin = await prisma.usuario.findUnique({
      where: { email: 'admin@dgac.gob.cl' }
    })
    
    const testUser = await prisma.usuario.findUnique({
      where: { email: 'jperezsilva@dgac.gob.cl' }
    })

    if (!admin) {
      console.log('   ‚ùå FALLO: Usuario admin NO existe')
      return
    }
    console.log('   ‚úÖ Admin existe:', admin.email)

    if (!testUser) {
      console.log('   ‚ùå FALLO: Usuario de prueba NO existe')
      return
    }
    console.log('   ‚úÖ Usuario de prueba existe:', testUser.email)

    // 2. Verificar hashes de contrase√±as
    console.log('\n2Ô∏è‚É£  VERIFICANDO HASHES DE CONTRASE√ëAS...')
    
    const adminPasswordValid = await bcrypt.compare('Admin123!', admin.password)
    console.log('   Admin password check:', adminPasswordValid ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA')
    
    const testPasswordValid = await bcrypt.compare('NuevaPass123!', testUser.password)
    console.log('   Test user password check:', testPasswordValid ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA')

    // 3. Verificar que los usuarios est√©n activos
    console.log('\n3Ô∏è‚É£  VERIFICANDO ESTADO DE USUARIOS...')
    
    console.log('   Admin activo:', admin.activo ? '‚úÖ S√ç' : '‚ùå NO')
    console.log('   Test user activo:', testUser.activo ? '‚úÖ S√ç' : '‚ùå NO')

    // 4. Verificar roles
    console.log('\n4Ô∏è‚É£  VERIFICANDO ROLES...')
    
    console.log('   Admin rol:', admin.rol === 'ADMIN_SISTEMA' ? '‚úÖ CORRECTO (ADMIN_SISTEMA)' : `‚ùå INCORRECTO (${admin.rol})`)
    console.log('   Test user rol:', testUser.rol === 'SUPERVISOR_ATS' ? '‚úÖ CORRECTO (SUPERVISOR_ATS)' : `‚ùå INCORRECTO (${testUser.rol})`)

    // 5. Verificar unidades
    console.log('\n5Ô∏è‚É£  VERIFICANDO UNIDADES...')
    
    console.log('   Admin unidadId:', admin.unidadId ? `‚úÖ ${admin.unidadId}` : '‚ùå SIN UNIDAD')
    console.log('   Test user unidadId:', testUser.unidadId ? `‚úÖ ${testUser.unidadId}` : '‚ùå SIN UNIDAD')

    // 6. Verificar que el schema NO tiene emailVerified
    console.log('\n6Ô∏è‚É£  VERIFICANDO SCHEMA PRISMA...')
    
    // @ts-expect-error - Si emailVerified existiera, esto no dar√≠a error
    const hasEmailVerified = 'emailVerified' in admin
    console.log('   Campo emailVerified existe:', hasEmailVerified ? '‚ùå S√ç (PROBLEMA!)' : '‚úÖ NO (CORRECTO)')

    // RESUMEN FINAL
    console.log('\n' + '=' .repeat(60))
    console.log('\nüìä RESUMEN FINAL:\n')
    
    const allChecks = [
      admin !== null,
      testUser !== null,
      adminPasswordValid,
      testPasswordValid,
      admin.activo,
      testUser.activo,
      admin.rol === 'ADMIN_SISTEMA',
      !hasEmailVerified
    ]
    
    const passedChecks = allChecks.filter(Boolean).length
    const totalChecks = allChecks.length

    if (passedChecks === totalChecks) {
      console.log('üéâ ¬°TODAS LAS VERIFICACIONES PASARON! (' + passedChecks + '/' + totalChecks + ')')
      console.log('\n‚úÖ EL SISTEMA DE AUTENTICACI√ìN EST√Å FUNCIONANDO CORRECTAMENTE')
      console.log('\nüîê CREDENCIALES LISTAS PARA USAR:')
      console.log('\n   Admin:')
      console.log('   üìß admin@dgac.gob.cl')
      console.log('   üîë Admin123!')
      console.log('\n   Usuario de prueba:')
      console.log('   üìß jperezsilva@dgac.gob.cl')
      console.log('   üîë NuevaPass123!')
      console.log('\nüöÄ PUEDES PROCEDER A PROBAR EL LOGIN EN http://localhost:3000/login')
    } else {
      console.log('‚ö†Ô∏è  ALGUNAS VERIFICACIONES FALLARON (' + passedChecks + '/' + totalChecks + ')')
      console.log('\n‚ùå NECESITAS REVISAR LOS ERRORES ANTERIORES')
    }

    console.log('\n' + '=' .repeat(60) + '\n')

  } catch (error) {
    console.error('\n‚ùå ERROR DURANTE LA VERIFICACI√ìN:')
    console.error(error)
  } finally {
    await prisma.$disconnect()
  }
}

verifyAuthFix()

